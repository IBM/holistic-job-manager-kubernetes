/*
Copyright 2019, 2021, 2022, 2023 The Multi-Cluster App Dispatcher Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// SchedulingSpecTemplateApplyConfiguration represents an declarative configuration of the SchedulingSpecTemplate type for use
// with apply.
type SchedulingSpecTemplateApplyConfiguration struct {
	NodeSelector     map[string]string                       `json:"nodeSelector,omitempty"`
	MinAvailable     *int                                    `json:"minAvailable,omitempty"`
	Requeuing        *RequeuingTemplateApplyConfiguration    `json:"requeuing,omitempty"`
	DispatchDuration *DispatchDurationSpecApplyConfiguration `json:"dispatchDuration,omitempty"`
}

// SchedulingSpecTemplateApplyConfiguration constructs an declarative configuration of the SchedulingSpecTemplate type for use with
// apply.
func SchedulingSpecTemplate() *SchedulingSpecTemplateApplyConfiguration {
	return &SchedulingSpecTemplateApplyConfiguration{}
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *SchedulingSpecTemplateApplyConfiguration) WithNodeSelector(entries map[string]string) *SchedulingSpecTemplateApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithMinAvailable sets the MinAvailable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinAvailable field is set to the value of the last call.
func (b *SchedulingSpecTemplateApplyConfiguration) WithMinAvailable(value int) *SchedulingSpecTemplateApplyConfiguration {
	b.MinAvailable = &value
	return b
}

// WithRequeuing sets the Requeuing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Requeuing field is set to the value of the last call.
func (b *SchedulingSpecTemplateApplyConfiguration) WithRequeuing(value *RequeuingTemplateApplyConfiguration) *SchedulingSpecTemplateApplyConfiguration {
	b.Requeuing = value
	return b
}

// WithDispatchDuration sets the DispatchDuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DispatchDuration field is set to the value of the last call.
func (b *SchedulingSpecTemplateApplyConfiguration) WithDispatchDuration(value *DispatchDurationSpecApplyConfiguration) *SchedulingSpecTemplateApplyConfiguration {
	b.DispatchDuration = value
	return b
}
