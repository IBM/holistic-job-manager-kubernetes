/*
Copyright 2019, 2021, 2022, 2023 The Multi-Cluster App Dispatcher Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/project-codeflare/multi-cluster-app-dispatcher/pkg/apis/controller/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// AppWrapperStatusApplyConfiguration represents an declarative configuration of the AppWrapperStatus type for use
// with apply.
type AppWrapperStatusApplyConfiguration struct {
	Pending                          *int32                                  `json:"pending,omitempty"`
	Running                          *int32                                  `json:"running,omitempty"`
	Succeeded                        *int32                                  `json:"Succeeded,omitempty"`
	Failed                           *int32                                  `json:"failed,omitempty"`
	MinAvailable                     *int32                                  `json:"template,omitempty"`
	CanRun                           *bool                                   `json:"canrun,omitempty"`
	IsDispatched                     *bool                                   `json:"isdispatched,omitempty"`
	State                            *v1beta1.AppWrapperState                `json:"state,omitempty"`
	Message                          *string                                 `json:"message,omitempty"`
	SystemPriority                   *float64                                `json:"systempriority,omitempty"`
	QueueJobState                    *v1beta1.AppWrapperConditionType        `json:"queuejobstate,omitempty"`
	ControllerFirstTimestamp         *v1.MicroTime                           `json:"controllerfirsttimestamp,omitempty"`
	ControllerFirstDispatchTimestamp *v1.MicroTime                           `json:"controllerfirstdispatchtimestamp,omitempty"`
	FilterIgnore                     *bool                                   `json:"filterignore,omitempty"`
	Sender                           *string                                 `json:"sender,omitempty"`
	Local                            *bool                                   `json:"local,omitempty"`
	Conditions                       []AppWrapperConditionApplyConfiguration `json:"conditions,omitempty"`
	PendingPodConditions             []PendingPodSpecApplyConfiguration      `json:"pendingpodconditions,omitempty"`
	TotalCPU                         *int32                                  `json:"totalcpu,omitempty"`
	TotalMemory                      *int32                                  `json:"totalmemory,omitempty"`
	TotalGPU                         *int32                                  `json:"totalgpu,omitempty"`
	RequeueingTimeInSeconds          *int                                    `json:"requeueingTimeInSeconds,omitempty"`
	NumberOfRequeueings              *int                                    `json:"numberOfRequeueings,omitempty"`
}

// AppWrapperStatusApplyConfiguration constructs an declarative configuration of the AppWrapperStatus type for use with
// apply.
func AppWrapperStatus() *AppWrapperStatusApplyConfiguration {
	return &AppWrapperStatusApplyConfiguration{}
}

// WithPending sets the Pending field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Pending field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithPending(value int32) *AppWrapperStatusApplyConfiguration {
	b.Pending = &value
	return b
}

// WithRunning sets the Running field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Running field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithRunning(value int32) *AppWrapperStatusApplyConfiguration {
	b.Running = &value
	return b
}

// WithSucceeded sets the Succeeded field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Succeeded field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithSucceeded(value int32) *AppWrapperStatusApplyConfiguration {
	b.Succeeded = &value
	return b
}

// WithFailed sets the Failed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Failed field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithFailed(value int32) *AppWrapperStatusApplyConfiguration {
	b.Failed = &value
	return b
}

// WithMinAvailable sets the MinAvailable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinAvailable field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithMinAvailable(value int32) *AppWrapperStatusApplyConfiguration {
	b.MinAvailable = &value
	return b
}

// WithCanRun sets the CanRun field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CanRun field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithCanRun(value bool) *AppWrapperStatusApplyConfiguration {
	b.CanRun = &value
	return b
}

// WithIsDispatched sets the IsDispatched field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IsDispatched field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithIsDispatched(value bool) *AppWrapperStatusApplyConfiguration {
	b.IsDispatched = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithState(value v1beta1.AppWrapperState) *AppWrapperStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithMessage(value string) *AppWrapperStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithSystemPriority sets the SystemPriority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SystemPriority field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithSystemPriority(value float64) *AppWrapperStatusApplyConfiguration {
	b.SystemPriority = &value
	return b
}

// WithQueueJobState sets the QueueJobState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the QueueJobState field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithQueueJobState(value v1beta1.AppWrapperConditionType) *AppWrapperStatusApplyConfiguration {
	b.QueueJobState = &value
	return b
}

// WithControllerFirstTimestamp sets the ControllerFirstTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControllerFirstTimestamp field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithControllerFirstTimestamp(value v1.MicroTime) *AppWrapperStatusApplyConfiguration {
	b.ControllerFirstTimestamp = &value
	return b
}

// WithControllerFirstDispatchTimestamp sets the ControllerFirstDispatchTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControllerFirstDispatchTimestamp field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithControllerFirstDispatchTimestamp(value v1.MicroTime) *AppWrapperStatusApplyConfiguration {
	b.ControllerFirstDispatchTimestamp = &value
	return b
}

// WithFilterIgnore sets the FilterIgnore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FilterIgnore field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithFilterIgnore(value bool) *AppWrapperStatusApplyConfiguration {
	b.FilterIgnore = &value
	return b
}

// WithSender sets the Sender field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sender field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithSender(value string) *AppWrapperStatusApplyConfiguration {
	b.Sender = &value
	return b
}

// WithLocal sets the Local field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Local field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithLocal(value bool) *AppWrapperStatusApplyConfiguration {
	b.Local = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *AppWrapperStatusApplyConfiguration) WithConditions(values ...*AppWrapperConditionApplyConfiguration) *AppWrapperStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithPendingPodConditions adds the given value to the PendingPodConditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PendingPodConditions field.
func (b *AppWrapperStatusApplyConfiguration) WithPendingPodConditions(values ...*PendingPodSpecApplyConfiguration) *AppWrapperStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPendingPodConditions")
		}
		b.PendingPodConditions = append(b.PendingPodConditions, *values[i])
	}
	return b
}

// WithTotalCPU sets the TotalCPU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalCPU field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithTotalCPU(value int32) *AppWrapperStatusApplyConfiguration {
	b.TotalCPU = &value
	return b
}

// WithTotalMemory sets the TotalMemory field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalMemory field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithTotalMemory(value int32) *AppWrapperStatusApplyConfiguration {
	b.TotalMemory = &value
	return b
}

// WithTotalGPU sets the TotalGPU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalGPU field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithTotalGPU(value int32) *AppWrapperStatusApplyConfiguration {
	b.TotalGPU = &value
	return b
}

// WithRequeueingTimeInSeconds sets the RequeueingTimeInSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequeueingTimeInSeconds field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithRequeueingTimeInSeconds(value int) *AppWrapperStatusApplyConfiguration {
	b.RequeueingTimeInSeconds = &value
	return b
}

// WithNumberOfRequeueings sets the NumberOfRequeueings field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NumberOfRequeueings field is set to the value of the last call.
func (b *AppWrapperStatusApplyConfiguration) WithNumberOfRequeueings(value int) *AppWrapperStatusApplyConfiguration {
	b.NumberOfRequeueings = &value
	return b
}
